#!/usr/bin/env -S cargo +nightly -Zscript
//! ```cargo
//! [package]
//! edition = "2021"
//!
//! [dependencies]
//! reqwest = { version = "0.11.24", features = ["blocking"] }
//! ```

use std::fs::File;
use std::io::{BufRead, BufReader};
use std::path::Path;
use std::io::Write;
use std::collections::HashMap;
use std::char;
use std::error::Error;

const URL: &str = "https://www.unicode.org/Public/math/revision-15/MathClass-15.txt";
const INPUT: &str = "MathClass.txt";
const OUTPUT: &str = "src/classes.rs";

const CLASSES: &[(char, &str)] = &[
    ('N', "normal"),
    ('A', "alphabetic"),
    ('B', "binary"),
    ('C', "closing"),
    ('D', "diacritic"),
    ('F', "fence"),
    ('G', "glyphpart"),
    ('L', "large"),
    ('O', "opening"),
    ('P', "punctuation"),
    ('R', "relation"),
    ('S', "space"),
    ('U', "unary"),
    ('V', "vary"),
    ('X', "special"),
];

fn main() -> Result<(), Box<dyn Error>> {
    if !Path::new(INPUT).exists() {
        let _ = std::fs::remove_file(INPUT)?;
        let _ = std::fs::remove_file(OUTPUT)?;
        let mut resp = reqwest::blocking::get(URL)?;
        let mut out = File::create(INPUT)?;
        std::io::copy(&mut resp, &mut out)?;
    }

    let mut mapping = Vec::new();

    if let Ok(file) = File::open(INPUT) {
        let reader = BufReader::new(file);
        for line in reader.lines() {
            if let Ok(line) = line {
                let line = line.split("#").next().unwrap().trim();
                if line.is_empty() {
                    continue;
                }
                let mut parts = line.split(";");
                if let (Some(cp), Some(cl)) = (parts.next(), parts.next()) {
                    let parts: Vec<_> = cp.split("..").map(|x| u32::from_str_radix(x, 16)).collect::<Result<_, _>>()?;
                    if parts.len() == 1 {
                        mapping.push((char::from_u32(parts[0]).ok_or("invalid unicode")?, cl.trim()));
                    } else {
                        for v in parts[0]..=parts[1] {
                            mapping.push((char::from_u32(v).ok_or("invalid unicode")?, cl.trim()));
                        }
                    }
                }
            }
        }
    }

    mapping.sort_by(|a, b| a.0.cmp(&b.0));

    let mut f = File::create(OUTPUT)?;
    f.write_all(b"// This file is generated by generate.rs\n")?;
    f.write_all(b"// Do not edit by hand!\n\n")?;
    f.write_all(b"static CLASSES: &[(char, &str)] = &[\n")?;
    for (cp, cl) in mapping {
        f.write_all(format!("    ('{}', \"{}\"),\n", cp.escape_unicode(), CLASSES.iter().find(|&&(_, v)| v == cl).map_or("", |&(k, _)| k)).as_bytes())?;
    }
    f.write_all(b"];\n")?;
    
    Ok(())
}
